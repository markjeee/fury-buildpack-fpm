#!/usr/bin/env ruby

require 'rubygems'
require 'fileutils'
require 'rbconfig'

gem 'bundler'
require 'bundler'

BUNDLE_SOURCE_PATH = 'bundle'

if ARGV[0].nil? || ARGV[0].empty?
  abort "ERROR: Root path is required"
end

root_path = File.expand_path(ARGV[0])

if ARGV[1].nil? || ARGV[1].empty?
  abort "ERROR: Bundle path is required"
end

bundle_spath = File.expand_path(ARGV[1])
bundle_fname = File.basename(bundle_spath)

if !ARGV[2].nil? && !ARGV[2].empty?
  bundle_gemfile = File.expand_path(ARGV[2])
else
  bundle_gemfile = nil
end

if File.exists?(bundle_spath)
  FileUtils.rm_r(bundle_spath)
end

ENV['BUNDLE_GEMFILE'] = bundle_gemfile || File.join(root_path, 'Gemfile')

Bundler.ui = Bundler::UI::Shell.new
Bundler.ui.info 'Bundling with    : %s' % File.expand_path(ENV['BUNDLE_GEMFILE'])

install_opts = { }
install_opts[:with] = [ :default ]
install_opts[:without] = [ :development, :test, :documentation ]
install_opts[:standalone] = [ :default ]
install_opts[:path] = bundle_spath
install_opts[:retry] = 3
install_opts[:jobs] = 3

Bundler.settings.temporary(install_opts)

bundle_def = ::Bundler.definition
bundle_def.validate_runtime!
Bundler::Installer.install(Bundler.root, bundle_def, install_opts)

vendor_cache_path = File.join(root_path, 'vendor/buildpack-cache')
if ENV['SKIP_TARBALL'].nil? && File.exists?(vendor_cache_path)
  FileUtils.mkpath(vendor_cache_path)

  tb_path = '%s_%s_%s_%s.tar.gz' % [ BUNDLE_SOURCE_PATH,
                                     defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby',
                                     RbConfig::CONFIG['ruby_version'],
                                     RbConfig::CONFIG['arch'] ]
  tb_path = File.join(vendor_cache_path, tb_path)

  cmd = 'cd %s; tar -czf %s *' % [ bundle_spath, tb_path, bundle_fname ]

  puts cmd
  system(cmd)

  puts 'Created %s (%s bytes)' % [ File.basename(tb_path), File.size(tb_path) ]

  FileUtils.rm_r(bundle_spath)
end
