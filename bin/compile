#!/usr/bin/env bash

export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

if [ -n "$1" ]; then
    if [ -d "$1" ]; then
        build=$(cd "$1"; pwd)
    else
        echo "ERROR: Invalid build path, aborting."
        exit 1
    fi
else
    echo "ERROR: Build path is not specified, aborting."
    exit 1
fi

if [ -d "$2" ]; then
    cache=$(cd "$2"; pwd)
else
    cache=""
fi

bin_dir=$(cd $(dirname $0); pwd)
buildpack_fpm_dir=$(dirname "$bin_dir")

vendor_buildpack_cache_dir=$buildpack_fpm_dir/vendor/buildpack-cache
vendor_buildpack_cache_file=$(ruby -e "puts 'bundle_%s_%s_%s.tar.gz' % [ defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby', RbConfig::CONFIG['ruby_version'], RbConfig::CONFIG['arch'] ]")

if [ -f "$vendor_buildpack_cache_dir/$vendor_buildpack_cache_file" ]; then
    mkdir -p $buildpack_fpm_dir/bundle
    cd $buildpack_fpm_dir/bundle; tar -xzpf $vendor_buildpack_cache_dir/$vendor_buildpack_cache_file
fi

rpm_cache_file=$vendor_buildpack_cache_dir/rpm_$(uname -s)_$(uname -m).tar.gz
if [ -f "$rpm_cache_file" ]; then
    mkdir -p $buildpack_fpm_dir/rpm
    cd $buildpack_fpm_dir/rpm; tar -xzpf $rpm_cache_file
    export PATH=$buildpack_fpm_dir/rpm/bin:$PATH
    export LD_LIBRARY_PATH=$buildpack_fpm_dir/rpm/lib:$LD_LIBRARY_PATH
fi

if [ -f "/etc/issue.net" ]; then
    echo "Distro           : $(cat /etc/issue.net)"
else
    echo "Distro           : $(uname -a)"
fi

echo "Using rpm        : $(rpm --version)"

if [ -n "$BUILD_VERSION" ]; then
    export BUILD_VERSION=$(echo "$BUILD_VERSION" | tr '\-\+' '..')
    echo "BUILD_VERSION    : $BUILD_VERSION"
fi

echo "Build pack dir   : $buildpack_fpm_dir"
echo "Using ruby       : $(ruby -v)"
echo "Using bundler    : $(bundle -v)"
if [ -f "$vendor_buildpack_cache_dir/$vendor_buildpack_cache_file" ]; then
    echo "Using fpm cache  : $vendor_buildpack_cache_file"
fi
echo "Using fpm        : $($bin_dir/support/fpm -v)"

if [ -f "$build/.env.fury-buildpack-fpm" ]; then
    source "$build/.env.fury-buildpack-fpm"
fi

if [ -n "$BUNDLE_GEMFILE" ]; then
    eval "export BUNDLE_GEMFILE=$BUNDLE_GEMFILE"
fi

if [ -n "$GEM_SPECFILE" ]; then
    eval "export GEM_SPECFILE=$GEM_SPECFILE"
fi

if [ -z "$TEST_NOPACKGUY" ]; then
    cd "$build" && $bin_dir/support/packguy "$build" "$cache"
    exit ${PIPESTATUS[0]}
else
  exit 0
fi
